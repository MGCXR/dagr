PROJECT: low_latency-dsec-detection
{'activation': 'relu',
 'after_pool_width': 1,
 'aggr': 'sum',
 'aug_p_flip': 0.5,
 'aug_trans': 0.1,
 'aug_zoom': 1.5,
 'base_width': 0.5,
 'batch_size': 4,
 'checkpoint': 'data/dagr_s_50.pth',
 'clip': 0.1,
 'config': 'config/dagr-s-dsec.yaml',
 'dataset': 'dsec',
 'dataset_directory': '/data/wzk',
 'edge_attr_dim': 2,
 'img_net': 'resnet50',
 'keep_temporal_ordering': False,
 'kernel_size': 5,
 'l_r': 0.0002,
 'max_neighbors': 16,
 'n_nodes': 50000,
 'net_stem_width': 0.5,
 'no_eval': False,
 'no_events': False,
 'num_interframe_steps': 10,
 'num_scales': 2,
 'output_directory': 'log',
 'pooling_aggr': 'max',
 'pooling_dim_at_output': '5x7',
 'radius': 0.01,
 'run_test': False,
 'task': 'detection',
 'time_window_us': 1000000,
 'tot_num_epochs': 801,
 'use_image': True,
 'weight_decay': 1e-05,
 'yolo_stem_width': 0.5}
init datasets
init net
/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torch_geometric/deprecation.py:26: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead
  warnings.warn(out)
/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
scripts/run_test.py:57: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  checkpoint = torch.load(args.checkpoint)
/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]

Testing :   0%|â–Ž                                                                                                                                | 7/3032 [00:02<17:03,  2.96it/s]
Traceback (most recent call last):
  File "scripts/run_test.py", line 62, in <module>
    metrics = run_test_with_visualization(test_loader, ema.ema, dataset=args.dataset)
  File "/home/mlc/dagr/src/dagr/utils/testing.py", line 29, in run_test_with_visualization
    for i, data in enumerate(tqdm.tqdm(loader, desc=f"Testing {name}")):
  File "/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/tqdm/std.py", line 1181, in __iter__
    for obj in iterable:
  File "/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 701, in __next__
    data = self._next_data()
  File "/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1445, in _next_data
    return self._process_data(data)
  File "/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torch/utils/data/dataloader.py", line 1491, in _process_data
    data.reraise()
  File "/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torch/_utils.py", line 719, in reraise
    raise exception
AssertionError: Caught AssertionError in DataLoader worker process 3.
Original Traceback (most recent call last):
  File "/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torch/utils/data/_utils/worker.py", line 351, in _worker_loop
    data = fetcher.fetch(index)  # type: ignore[possibly-undefined]
  File "/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 52, in fetch
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/mlc/.conda/envs/dagr/lib/python3.8/site-packages/torch/utils/data/_utils/fetch.py", line 52, in <listcomp>
    data = [self.dataset[idx] for idx in possibly_batched_index]
  File "/home/mlc/dagr/src/dagr/data/dsec_data.py", line 144, in __getitem__
    detections_1 = self.dataset.get_tracks(image_index_1, mask=track_masks, directory_name=dataset.root.name)
  File "/home/mlc/dagr/libs/dsec-det/src/dsec_det/dataset.py", line 106, in get_tracks
    i_0, i_1 = self.get_index_window(index, len(img_idx_to_track_idx), sync=self.sync)
  File "/home/mlc/dagr/libs/dsec-det/src/dsec_det/dataset.py", line 98, in get_index_window
    assert 0 <= index < num_idx - 1
AssertionError